# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/ExtractedPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExtractedPosition(genpy.Message):
  _md5sum = "0e48067eb51a80d53e09341230ac756f"
  _type = "autoware_msgs/ExtractedPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message defines the information required to describe a lamp (bulb)
# in a traffic signal, according to the information extracted from the ADAS Map
# and the extrinsic camera calibration

int32 signalId  # Traffic Signal Lamp ID
int32 u         # Lamp ROI x in image coords
int32 v         # Lamp ROI y in image coords
int32 radius    # Lamp Radius
float64 x       # X position in map coordinates
float64 y       # Y position in map coordinates
float64 z       # Z position in map coordinates
float64 hang    # Azimuth "Horizontal Angle"
int8 type       # Lamp Type (red, yellow, green, ...)
int32 linkId    # Closest LinkID (lane) in VectorMap
int32 plId      # PoleID to which this Lamp belongs to
"""
  __slots__ = ['signalId','u','v','radius','x','y','z','hang','type','linkId','plId']
  _slot_types = ['int32','int32','int32','int32','float64','float64','float64','float64','int8','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       signalId,u,v,radius,x,y,z,hang,type,linkId,plId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtractedPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.signalId is None:
        self.signalId = 0
      if self.u is None:
        self.u = 0
      if self.v is None:
        self.v = 0
      if self.radius is None:
        self.radius = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.hang is None:
        self.hang = 0.
      if self.type is None:
        self.type = 0
      if self.linkId is None:
        self.linkId = 0
      if self.plId is None:
        self.plId = 0
    else:
      self.signalId = 0
      self.u = 0
      self.v = 0
      self.radius = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.hang = 0.
      self.type = 0
      self.linkId = 0
      self.plId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i4db2i().pack(_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.signalId, _x.u, _x.v, _x.radius, _x.x, _x.y, _x.z, _x.hang, _x.type, _x.linkId, _x.plId,) = _get_struct_4i4db2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i4db2i = None
def _get_struct_4i4db2i():
    global _struct_4i4db2i
    if _struct_4i4db2i is None:
        _struct_4i4db2i = struct.Struct("<4i4db2i")
    return _struct_4i4db2i
