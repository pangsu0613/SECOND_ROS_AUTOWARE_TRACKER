# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/ImageObjTracked.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import std_msgs.msg

class ImageObjTracked(genpy.Message):
  _md5sum = "6f3751f77b67bc47fba29cbdd3ea3d56"
  _type = "autoware_msgs/ImageObjTracked"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string type
uint8 total_num
int32[] obj_id
ImageRectRanged[] rect_ranged
int32[] real_data
int32[] lifespan
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autoware_msgs/ImageRectRanged
ImageRect rect
float32 range
float32 min_height
float32 max_height

================================================================================
MSG: autoware_msgs/ImageRect
int32 x
int32 y
int32 height
int32 width
float32 score
"""
  __slots__ = ['header','type','total_num','obj_id','rect_ranged','real_data','lifespan']
  _slot_types = ['std_msgs/Header','string','uint8','int32[]','autoware_msgs/ImageRectRanged[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,total_num,obj_id,rect_ranged,real_data,lifespan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageObjTracked, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = ''
      if self.total_num is None:
        self.total_num = 0
      if self.obj_id is None:
        self.obj_id = []
      if self.rect_ranged is None:
        self.rect_ranged = []
      if self.real_data is None:
        self.real_data = []
      if self.lifespan is None:
        self.lifespan = []
    else:
      self.header = std_msgs.msg.Header()
      self.type = ''
      self.total_num = 0
      self.obj_id = []
      self.rect_ranged = []
      self.real_data = []
      self.lifespan = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.total_num))
      length = len(self.obj_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.obj_id))
      length = len(self.rect_ranged)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect_ranged:
        _v1 = val1.rect
        _x = _v1
        buff.write(_get_struct_4if().pack(_x.x, _x.y, _x.height, _x.width, _x.score))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.range, _x.min_height, _x.max_height))
      length = len(self.real_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.real_data))
      length = len(self.lifespan)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.lifespan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rect_ranged is None:
        self.rect_ranged = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.total_num,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.obj_id = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect_ranged = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ImageRectRanged()
        _v2 = val1.rect
        _x = _v2
        start = end
        end += 20
        (_x.x, _x.y, _x.height, _x.width, _x.score,) = _get_struct_4if().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.range, _x.min_height, _x.max_height,) = _get_struct_3f().unpack(str[start:end])
        self.rect_ranged.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.real_data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.lifespan = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.total_num))
      length = len(self.obj_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.obj_id.tostring())
      length = len(self.rect_ranged)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect_ranged:
        _v3 = val1.rect
        _x = _v3
        buff.write(_get_struct_4if().pack(_x.x, _x.y, _x.height, _x.width, _x.score))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.range, _x.min_height, _x.max_height))
      length = len(self.real_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.real_data.tostring())
      length = len(self.lifespan)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.lifespan.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rect_ranged is None:
        self.rect_ranged = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.total_num,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.obj_id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect_ranged = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.ImageRectRanged()
        _v4 = val1.rect
        _x = _v4
        start = end
        end += 20
        (_x.x, _x.y, _x.height, _x.width, _x.score,) = _get_struct_4if().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.range, _x.min_height, _x.max_height,) = _get_struct_3f().unpack(str[start:end])
        self.rect_ranged.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.real_data = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.lifespan = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_4if = None
def _get_struct_4if():
    global _struct_4if
    if _struct_4if is None:
        _struct_4if = struct.Struct("<4if")
    return _struct_4if
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
