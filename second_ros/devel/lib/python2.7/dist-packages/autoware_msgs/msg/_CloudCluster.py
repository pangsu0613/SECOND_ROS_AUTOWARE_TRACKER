# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/CloudCluster.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import jsk_recognition_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class CloudCluster(genpy.Message):
  _md5sum = "ee7b21b447ceefba70710356a4b6162b"
  _type = "autoware_msgs/CloudCluster"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint32 id
string label
float64 score

sensor_msgs/PointCloud2 cloud

geometry_msgs/PointStamped min_point
geometry_msgs/PointStamped max_point
geometry_msgs/PointStamped avg_point
geometry_msgs/PointStamped centroid_point

float64 estimated_angle

geometry_msgs/Vector3 dimensions
geometry_msgs/Vector3 eigen_values
geometry_msgs/Vector3[] eigen_vectors

#Array of 33 floats containing the FPFH descriptor
std_msgs/Float32MultiArray fpfh_descriptor 

jsk_recognition_msgs/BoundingBox bounding_box
geometry_msgs/PolygonStamped convex_hull

# Indicator information
# INDICATOR_LEFT 0
# INDICATOR_RIGHT 1
# INDICATOR_BOTH 2
# INDICATOR_NONE 3
uint32 indicator_state
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: jsk_recognition_msgs/BoundingBox
# BoundingBox represents a oriented bounding box.
Header header
geometry_msgs/Pose pose
geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)
# You can use this field to hold value such as likelihood
float32 value
uint32 label

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','id','label','score','cloud','min_point','max_point','avg_point','centroid_point','estimated_angle','dimensions','eigen_values','eigen_vectors','fpfh_descriptor','bounding_box','convex_hull','indicator_state']
  _slot_types = ['std_msgs/Header','uint32','string','float64','sensor_msgs/PointCloud2','geometry_msgs/PointStamped','geometry_msgs/PointStamped','geometry_msgs/PointStamped','geometry_msgs/PointStamped','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3[]','std_msgs/Float32MultiArray','jsk_recognition_msgs/BoundingBox','geometry_msgs/PolygonStamped','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,label,score,cloud,min_point,max_point,avg_point,centroid_point,estimated_angle,dimensions,eigen_values,eigen_vectors,fpfh_descriptor,bounding_box,convex_hull,indicator_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CloudCluster, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.label is None:
        self.label = ''
      if self.score is None:
        self.score = 0.
      if self.cloud is None:
        self.cloud = sensor_msgs.msg.PointCloud2()
      if self.min_point is None:
        self.min_point = geometry_msgs.msg.PointStamped()
      if self.max_point is None:
        self.max_point = geometry_msgs.msg.PointStamped()
      if self.avg_point is None:
        self.avg_point = geometry_msgs.msg.PointStamped()
      if self.centroid_point is None:
        self.centroid_point = geometry_msgs.msg.PointStamped()
      if self.estimated_angle is None:
        self.estimated_angle = 0.
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = []
      if self.fpfh_descriptor is None:
        self.fpfh_descriptor = std_msgs.msg.Float32MultiArray()
      if self.bounding_box is None:
        self.bounding_box = jsk_recognition_msgs.msg.BoundingBox()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      if self.indicator_state is None:
        self.indicator_state = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.label = ''
      self.score = 0.
      self.cloud = sensor_msgs.msg.PointCloud2()
      self.min_point = geometry_msgs.msg.PointStamped()
      self.max_point = geometry_msgs.msg.PointStamped()
      self.avg_point = geometry_msgs.msg.PointStamped()
      self.centroid_point = geometry_msgs.msg.PointStamped()
      self.estimated_angle = 0.
      self.dimensions = geometry_msgs.msg.Vector3()
      self.eigen_values = geometry_msgs.msg.Vector3()
      self.eigen_vectors = []
      self.fpfh_descriptor = std_msgs.msg.Float32MultiArray()
      self.bounding_box = jsk_recognition_msgs.msg.BoundingBox()
      self.convex_hull = geometry_msgs.msg.PolygonStamped()
      self.indicator_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.id))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.score, _x.cloud.header.seq, _x.cloud.header.stamp.secs, _x.cloud.header.stamp.nsecs))
      _x = self.cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud.height, _x.cloud.width))
      length = len(self.cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud.is_bigendian, _x.cloud.point_step, _x.cloud.row_step))
      _x = self.cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud.is_dense, _x.min_point.header.seq, _x.min_point.header.stamp.secs, _x.min_point.header.stamp.nsecs))
      _x = self.min_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.min_point.point.x, _x.min_point.point.y, _x.min_point.point.z, _x.max_point.header.seq, _x.max_point.header.stamp.secs, _x.max_point.header.stamp.nsecs))
      _x = self.max_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.max_point.point.x, _x.max_point.point.y, _x.max_point.point.z, _x.avg_point.header.seq, _x.avg_point.header.stamp.secs, _x.avg_point.header.stamp.nsecs))
      _x = self.avg_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.avg_point.point.x, _x.avg_point.point.y, _x.avg_point.point.z, _x.centroid_point.header.seq, _x.centroid_point.header.stamp.secs, _x.centroid_point.header.stamp.nsecs))
      _x = self.centroid_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.centroid_point.point.x, _x.centroid_point.point.y, _x.centroid_point.point.z, _x.estimated_angle, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z))
      length = len(self.eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.fpfh_descriptor.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.fpfh_descriptor.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.fpfh_descriptor.layout.data_offset))
      length = len(self.fpfh_descriptor.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.fpfh_descriptor.data))
      _x = self
      buff.write(_get_struct_3I().pack(_x.bounding_box.header.seq, _x.bounding_box.header.stamp.secs, _x.bounding_box.header.stamp.nsecs))
      _x = self.bounding_box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10df4I().pack(_x.bounding_box.pose.position.x, _x.bounding_box.pose.position.y, _x.bounding_box.pose.position.z, _x.bounding_box.pose.orientation.x, _x.bounding_box.pose.orientation.y, _x.bounding_box.pose.orientation.z, _x.bounding_box.pose.orientation.w, _x.bounding_box.dimensions.x, _x.bounding_box.dimensions.y, _x.bounding_box.dimensions.z, _x.bounding_box.value, _x.bounding_box.label, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_I().pack(self.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cloud is None:
        self.cloud = sensor_msgs.msg.PointCloud2()
      if self.min_point is None:
        self.min_point = geometry_msgs.msg.PointStamped()
      if self.max_point is None:
        self.max_point = geometry_msgs.msg.PointStamped()
      if self.avg_point is None:
        self.avg_point = geometry_msgs.msg.PointStamped()
      if self.centroid_point is None:
        self.centroid_point = geometry_msgs.msg.PointStamped()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = None
      if self.fpfh_descriptor is None:
        self.fpfh_descriptor = std_msgs.msg.Float32MultiArray()
      if self.bounding_box is None:
        self.bounding_box = jsk_recognition_msgs.msg.BoundingBox()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.score, _x.cloud.header.seq, _x.cloud.header.stamp.secs, _x.cloud.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud.height, _x.cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud.is_bigendian, _x.cloud.point_step, _x.cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud.is_bigendian = bool(self.cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud.is_dense, _x.min_point.header.seq, _x.min_point.header.stamp.secs, _x.min_point.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud.is_dense = bool(self.cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.min_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.min_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.min_point.point.x, _x.min_point.point.y, _x.min_point.point.z, _x.max_point.header.seq, _x.max_point.header.stamp.secs, _x.max_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.max_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.max_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.max_point.point.x, _x.max_point.point.y, _x.max_point.point.z, _x.avg_point.header.seq, _x.avg_point.header.stamp.secs, _x.avg_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.avg_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.avg_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.avg_point.point.x, _x.avg_point.point.y, _x.avg_point.point.z, _x.centroid_point.header.seq, _x.centroid_point.header.stamp.secs, _x.centroid_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.centroid_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.centroid_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.centroid_point.point.x, _x.centroid_point.point.y, _x.centroid_point.point.z, _x.estimated_angle, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fpfh_descriptor.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.fpfh_descriptor.layout.dim.append(val1)
      start = end
      end += 4
      (self.fpfh_descriptor.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fpfh_descriptor.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.bounding_box.header.seq, _x.bounding_box.header.stamp.secs, _x.bounding_box.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bounding_box.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.bounding_box.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.bounding_box.pose.position.x, _x.bounding_box.pose.position.y, _x.bounding_box.pose.position.z, _x.bounding_box.pose.orientation.x, _x.bounding_box.pose.orientation.y, _x.bounding_box.pose.orientation.z, _x.bounding_box.pose.orientation.w, _x.bounding_box.dimensions.x, _x.bounding_box.dimensions.y, _x.bounding_box.dimensions.z, _x.bounding_box.value, _x.bounding_box.label, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_10df4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      start = end
      end += 4
      (self.indicator_state,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.id))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.score, _x.cloud.header.seq, _x.cloud.header.stamp.secs, _x.cloud.header.stamp.nsecs))
      _x = self.cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.cloud.height, _x.cloud.width))
      length = len(self.cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.cloud.is_bigendian, _x.cloud.point_step, _x.cloud.row_step))
      _x = self.cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.cloud.is_dense, _x.min_point.header.seq, _x.min_point.header.stamp.secs, _x.min_point.header.stamp.nsecs))
      _x = self.min_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.min_point.point.x, _x.min_point.point.y, _x.min_point.point.z, _x.max_point.header.seq, _x.max_point.header.stamp.secs, _x.max_point.header.stamp.nsecs))
      _x = self.max_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.max_point.point.x, _x.max_point.point.y, _x.max_point.point.z, _x.avg_point.header.seq, _x.avg_point.header.stamp.secs, _x.avg_point.header.stamp.nsecs))
      _x = self.avg_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.avg_point.point.x, _x.avg_point.point.y, _x.avg_point.point.z, _x.centroid_point.header.seq, _x.centroid_point.header.stamp.secs, _x.centroid_point.header.stamp.nsecs))
      _x = self.centroid_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.centroid_point.point.x, _x.centroid_point.point.y, _x.centroid_point.point.z, _x.estimated_angle, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z))
      length = len(self.eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.eigen_vectors:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.fpfh_descriptor.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.fpfh_descriptor.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.fpfh_descriptor.layout.data_offset))
      length = len(self.fpfh_descriptor.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fpfh_descriptor.data.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.bounding_box.header.seq, _x.bounding_box.header.stamp.secs, _x.bounding_box.header.stamp.nsecs))
      _x = self.bounding_box.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10df4I().pack(_x.bounding_box.pose.position.x, _x.bounding_box.pose.position.y, _x.bounding_box.pose.position.z, _x.bounding_box.pose.orientation.x, _x.bounding_box.pose.orientation.y, _x.bounding_box.pose.orientation.z, _x.bounding_box.pose.orientation.w, _x.bounding_box.dimensions.x, _x.bounding_box.dimensions.y, _x.bounding_box.dimensions.z, _x.bounding_box.value, _x.bounding_box.label, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs))
      _x = self.convex_hull.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.convex_hull.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.convex_hull.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_I().pack(self.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cloud is None:
        self.cloud = sensor_msgs.msg.PointCloud2()
      if self.min_point is None:
        self.min_point = geometry_msgs.msg.PointStamped()
      if self.max_point is None:
        self.max_point = geometry_msgs.msg.PointStamped()
      if self.avg_point is None:
        self.avg_point = geometry_msgs.msg.PointStamped()
      if self.centroid_point is None:
        self.centroid_point = geometry_msgs.msg.PointStamped()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.eigen_values is None:
        self.eigen_values = geometry_msgs.msg.Vector3()
      if self.eigen_vectors is None:
        self.eigen_vectors = None
      if self.fpfh_descriptor is None:
        self.fpfh_descriptor = std_msgs.msg.Float32MultiArray()
      if self.bounding_box is None:
        self.bounding_box = jsk_recognition_msgs.msg.BoundingBox()
      if self.convex_hull is None:
        self.convex_hull = geometry_msgs.msg.PolygonStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.score, _x.cloud.header.seq, _x.cloud.header.stamp.secs, _x.cloud.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.cloud.height, _x.cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.cloud.is_bigendian, _x.cloud.point_step, _x.cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.cloud.is_bigendian = bool(self.cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.cloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.cloud.is_dense, _x.min_point.header.seq, _x.min_point.header.stamp.secs, _x.min_point.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.cloud.is_dense = bool(self.cloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.min_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.min_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.min_point.point.x, _x.min_point.point.y, _x.min_point.point.z, _x.max_point.header.seq, _x.max_point.header.stamp.secs, _x.max_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.max_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.max_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.max_point.point.x, _x.max_point.point.y, _x.max_point.point.z, _x.avg_point.header.seq, _x.avg_point.header.stamp.secs, _x.avg_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.avg_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.avg_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.avg_point.point.x, _x.avg_point.point.y, _x.avg_point.point.z, _x.centroid_point.header.seq, _x.centroid_point.header.stamp.secs, _x.centroid_point.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.centroid_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.centroid_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.centroid_point.point.x, _x.centroid_point.point.y, _x.centroid_point.point.z, _x.estimated_angle, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.eigen_values.x, _x.eigen_values.y, _x.eigen_values.z,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.eigen_vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fpfh_descriptor.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.fpfh_descriptor.layout.dim.append(val1)
      start = end
      end += 4
      (self.fpfh_descriptor.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.fpfh_descriptor.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.bounding_box.header.seq, _x.bounding_box.header.stamp.secs, _x.bounding_box.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bounding_box.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.bounding_box.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.bounding_box.pose.position.x, _x.bounding_box.pose.position.y, _x.bounding_box.pose.position.z, _x.bounding_box.pose.orientation.x, _x.bounding_box.pose.orientation.y, _x.bounding_box.pose.orientation.z, _x.bounding_box.pose.orientation.w, _x.bounding_box.dimensions.x, _x.bounding_box.dimensions.y, _x.bounding_box.dimensions.z, _x.bounding_box.value, _x.bounding_box.label, _x.convex_hull.header.seq, _x.convex_hull.header.stamp.secs, _x.convex_hull.header.stamp.nsecs,) = _get_struct_10df4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.convex_hull.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.convex_hull.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.convex_hull.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.convex_hull.polygon.points.append(val1)
      start = end
      end += 4
      (self.indicator_state,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_10df4I = None
def _get_struct_10df4I():
    global _struct_10df4I
    if _struct_10df4I is None:
        _struct_10df4I = struct.Struct("<10df4I")
    return _struct_10df4I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
