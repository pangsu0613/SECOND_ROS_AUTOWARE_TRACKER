# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/CloudClusterArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import autoware_msgs.msg
import jsk_recognition_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class CloudClusterArray(genpy.Message):
  _md5sum = "5bdd7c958335da845b88351aab5141d4"
  _type = "autoware_msgs/CloudClusterArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
CloudCluster[] clusters
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autoware_msgs/CloudCluster
std_msgs/Header header

uint32 id
string label
float64 score

sensor_msgs/PointCloud2 cloud

geometry_msgs/PointStamped min_point
geometry_msgs/PointStamped max_point
geometry_msgs/PointStamped avg_point
geometry_msgs/PointStamped centroid_point

float64 estimated_angle

geometry_msgs/Vector3 dimensions
geometry_msgs/Vector3 eigen_values
geometry_msgs/Vector3[] eigen_vectors

#Array of 33 floats containing the FPFH descriptor
std_msgs/Float32MultiArray fpfh_descriptor 

jsk_recognition_msgs/BoundingBox bounding_box
geometry_msgs/PolygonStamped convex_hull

# Indicator information
# INDICATOR_LEFT 0
# INDICATOR_RIGHT 1
# INDICATOR_BOTH 2
# INDICATOR_NONE 3
uint32 indicator_state
================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: jsk_recognition_msgs/BoundingBox
# BoundingBox represents a oriented bounding box.
Header header
geometry_msgs/Pose pose
geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)
# You can use this field to hold value such as likelihood
float32 value
uint32 label

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','clusters']
  _slot_types = ['std_msgs/Header','autoware_msgs/CloudCluster[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,clusters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CloudClusterArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters is None:
        self.clusters = []
    else:
      self.header = std_msgs.msg.Header()
      self.clusters = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.score))
        _v3 = val1.cloud
        _v4 = _v3.header
        buff.write(_get_struct_I().pack(_v4.seq))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v3.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v3
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v3.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v3.is_dense))
        _v6 = val1.min_point
        _v7 = _v6.header
        buff.write(_get_struct_I().pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = _v6.point
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.max_point
        _v11 = _v10.header
        buff.write(_get_struct_I().pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = _v10.point
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.avg_point
        _v15 = _v14.header
        buff.write(_get_struct_I().pack(_v15.seq))
        _v16 = _v15.stamp
        _x = _v16
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v15.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v17 = _v14.point
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = val1.centroid_point
        _v19 = _v18.header
        buff.write(_get_struct_I().pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = _v18.point
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(val1.estimated_angle))
        _v22 = val1.dimensions
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = val1.eigen_values
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eigen_vectors:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = val1.fpfh_descriptor
        _v25 = _v24.layout
        length = len(_v25.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v25.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        buff.write(_get_struct_I().pack(_v25.data_offset))
        length = len(_v24.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *_v24.data))
        _v26 = val1.bounding_box
        _v27 = _v26.header
        buff.write(_get_struct_I().pack(_v27.seq))
        _v28 = _v27.stamp
        _x = _v28
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v27.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v29 = _v26.pose
        _v30 = _v29.position
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v31 = _v29.orientation
        _x = _v31
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v32 = _v26.dimensions
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v26
        buff.write(_get_struct_fI().pack(_x.value, _x.label))
        _v33 = val1.convex_hull
        _v34 = _v33.header
        buff.write(_get_struct_I().pack(_v34.seq))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v36 = _v33.polygon
        length = len(_v36.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v36.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_I().pack(val1.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters is None:
        self.clusters = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.CloudCluster()
        _v37 = val1.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8')
        else:
          _v37.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        _v39 = val1.cloud
        _v40 = _v39.header
        start = end
        end += 4
        (_v40.seq,) = _get_struct_I().unpack(str[start:end])
        _v41 = _v40.stamp
        _x = _v41
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.frame_id = str[start:end].decode('utf-8')
        else:
          _v40.frame_id = str[start:end]
        _x = _v39
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v39.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v39.fields.append(val3)
        _x = _v39
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v39.is_bigendian = bool(_v39.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v39.data = str[start:end]
        start = end
        end += 1
        (_v39.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v39.is_dense = bool(_v39.is_dense)
        _v42 = val1.min_point
        _v43 = _v42.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8')
        else:
          _v43.frame_id = str[start:end]
        _v45 = _v42.point
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = val1.max_point
        _v47 = _v46.header
        start = end
        end += 4
        (_v47.seq,) = _get_struct_I().unpack(str[start:end])
        _v48 = _v47.stamp
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v47.frame_id = str[start:end].decode('utf-8')
        else:
          _v47.frame_id = str[start:end]
        _v49 = _v46.point
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = val1.avg_point
        _v51 = _v50.header
        start = end
        end += 4
        (_v51.seq,) = _get_struct_I().unpack(str[start:end])
        _v52 = _v51.stamp
        _x = _v52
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.frame_id = str[start:end].decode('utf-8')
        else:
          _v51.frame_id = str[start:end]
        _v53 = _v50.point
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v54 = val1.centroid_point
        _v55 = _v54.header
        start = end
        end += 4
        (_v55.seq,) = _get_struct_I().unpack(str[start:end])
        _v56 = _v55.stamp
        _x = _v56
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8')
        else:
          _v55.frame_id = str[start:end]
        _v57 = _v54.point
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.estimated_angle,) = _get_struct_d().unpack(str[start:end])
        _v58 = val1.dimensions
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v59 = val1.eigen_values
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.eigen_vectors.append(val2)
        _v60 = val1.fpfh_descriptor
        _v61 = _v60.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v61.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v61.dim.append(val4)
        start = end
        end += 4
        (_v61.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v60.data = struct.unpack(pattern, str[start:end])
        _v62 = val1.bounding_box
        _v63 = _v62.header
        start = end
        end += 4
        (_v63.seq,) = _get_struct_I().unpack(str[start:end])
        _v64 = _v63.stamp
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.frame_id = str[start:end].decode('utf-8')
        else:
          _v63.frame_id = str[start:end]
        _v65 = _v62.pose
        _v66 = _v65.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = _v65.orientation
        _x = _v67
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v68 = _v62.dimensions
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v62
        start = end
        end += 8
        (_x.value, _x.label,) = _get_struct_fI().unpack(str[start:end])
        _v69 = val1.convex_hull
        _v70 = _v69.header
        start = end
        end += 4
        (_v70.seq,) = _get_struct_I().unpack(str[start:end])
        _v71 = _v70.stamp
        _x = _v71
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v70.frame_id = str[start:end].decode('utf-8')
        else:
          _v70.frame_id = str[start:end]
        _v72 = _v69.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v72.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v72.points.append(val4)
        start = end
        end += 4
        (val1.indicator_state,) = _get_struct_I().unpack(str[start:end])
        self.clusters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters:
        _v73 = val1.header
        buff.write(_get_struct_I().pack(_v73.seq))
        _v74 = _v73.stamp
        _x = _v74
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v73.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.score))
        _v75 = val1.cloud
        _v76 = _v75.header
        buff.write(_get_struct_I().pack(_v76.seq))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v75
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v75.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v75
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v75.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_B().pack(_v75.is_dense))
        _v78 = val1.min_point
        _v79 = _v78.header
        buff.write(_get_struct_I().pack(_v79.seq))
        _v80 = _v79.stamp
        _x = _v80
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v79.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v81 = _v78.point
        _x = _v81
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v82 = val1.max_point
        _v83 = _v82.header
        buff.write(_get_struct_I().pack(_v83.seq))
        _v84 = _v83.stamp
        _x = _v84
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v83.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v85 = _v82.point
        _x = _v85
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v86 = val1.avg_point
        _v87 = _v86.header
        buff.write(_get_struct_I().pack(_v87.seq))
        _v88 = _v87.stamp
        _x = _v88
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v87.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v89 = _v86.point
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = val1.centroid_point
        _v91 = _v90.header
        buff.write(_get_struct_I().pack(_v91.seq))
        _v92 = _v91.stamp
        _x = _v92
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v91.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v93 = _v90.point
        _x = _v93
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_d().pack(val1.estimated_angle))
        _v94 = val1.dimensions
        _x = _v94
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v95 = val1.eigen_values
        _x = _v95
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eigen_vectors:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v96 = val1.fpfh_descriptor
        _v97 = _v96.layout
        length = len(_v97.dim)
        buff.write(_struct_I.pack(length))
        for val4 in _v97.dim:
          _x = val4.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        buff.write(_get_struct_I().pack(_v97.data_offset))
        length = len(_v96.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v96.data.tostring())
        _v98 = val1.bounding_box
        _v99 = _v98.header
        buff.write(_get_struct_I().pack(_v99.seq))
        _v100 = _v99.stamp
        _x = _v100
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v99.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v101 = _v98.pose
        _v102 = _v101.position
        _x = _v102
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v103 = _v101.orientation
        _x = _v103
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v104 = _v98.dimensions
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v98
        buff.write(_get_struct_fI().pack(_x.value, _x.label))
        _v105 = val1.convex_hull
        _v106 = _v105.header
        buff.write(_get_struct_I().pack(_v106.seq))
        _v107 = _v106.stamp
        _x = _v107
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v106.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v108 = _v105.polygon
        length = len(_v108.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v108.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_I().pack(val1.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters is None:
        self.clusters = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.CloudCluster()
        _v109 = val1.header
        start = end
        end += 4
        (_v109.seq,) = _get_struct_I().unpack(str[start:end])
        _v110 = _v109.stamp
        _x = _v110
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v109.frame_id = str[start:end].decode('utf-8')
        else:
          _v109.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(str[start:end])
        _v111 = val1.cloud
        _v112 = _v111.header
        start = end
        end += 4
        (_v112.seq,) = _get_struct_I().unpack(str[start:end])
        _v113 = _v112.stamp
        _x = _v113
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v112.frame_id = str[start:end].decode('utf-8')
        else:
          _v112.frame_id = str[start:end]
        _x = _v111
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v111.fields.append(val3)
        _x = _v111
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v111.is_bigendian = bool(_v111.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v111.data = str[start:end]
        start = end
        end += 1
        (_v111.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v111.is_dense = bool(_v111.is_dense)
        _v114 = val1.min_point
        _v115 = _v114.header
        start = end
        end += 4
        (_v115.seq,) = _get_struct_I().unpack(str[start:end])
        _v116 = _v115.stamp
        _x = _v116
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v115.frame_id = str[start:end].decode('utf-8')
        else:
          _v115.frame_id = str[start:end]
        _v117 = _v114.point
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v118 = val1.max_point
        _v119 = _v118.header
        start = end
        end += 4
        (_v119.seq,) = _get_struct_I().unpack(str[start:end])
        _v120 = _v119.stamp
        _x = _v120
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v119.frame_id = str[start:end].decode('utf-8')
        else:
          _v119.frame_id = str[start:end]
        _v121 = _v118.point
        _x = _v121
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v122 = val1.avg_point
        _v123 = _v122.header
        start = end
        end += 4
        (_v123.seq,) = _get_struct_I().unpack(str[start:end])
        _v124 = _v123.stamp
        _x = _v124
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v123.frame_id = str[start:end].decode('utf-8')
        else:
          _v123.frame_id = str[start:end]
        _v125 = _v122.point
        _x = _v125
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v126 = val1.centroid_point
        _v127 = _v126.header
        start = end
        end += 4
        (_v127.seq,) = _get_struct_I().unpack(str[start:end])
        _v128 = _v127.stamp
        _x = _v128
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v127.frame_id = str[start:end].decode('utf-8')
        else:
          _v127.frame_id = str[start:end]
        _v129 = _v126.point
        _x = _v129
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.estimated_angle,) = _get_struct_d().unpack(str[start:end])
        _v130 = val1.dimensions
        _x = _v130
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v131 = val1.eigen_values
        _x = _v131
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.eigen_vectors.append(val2)
        _v132 = val1.fpfh_descriptor
        _v133 = _v132.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v133.dim = []
        for i in range(0, length):
          val4 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.label = str[start:end].decode('utf-8')
          else:
            val4.label = str[start:end]
          _x = val4
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v133.dim.append(val4)
        start = end
        end += 4
        (_v133.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        _v132.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v134 = val1.bounding_box
        _v135 = _v134.header
        start = end
        end += 4
        (_v135.seq,) = _get_struct_I().unpack(str[start:end])
        _v136 = _v135.stamp
        _x = _v136
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v135.frame_id = str[start:end].decode('utf-8')
        else:
          _v135.frame_id = str[start:end]
        _v137 = _v134.pose
        _v138 = _v137.position
        _x = _v138
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v139 = _v137.orientation
        _x = _v139
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v140 = _v134.dimensions
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v134
        start = end
        end += 8
        (_x.value, _x.label,) = _get_struct_fI().unpack(str[start:end])
        _v141 = val1.convex_hull
        _v142 = _v141.header
        start = end
        end += 4
        (_v142.seq,) = _get_struct_I().unpack(str[start:end])
        _v143 = _v142.stamp
        _x = _v143
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v142.frame_id = str[start:end].decode('utf-8')
        else:
          _v142.frame_id = str[start:end]
        _v144 = _v141.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v144.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v144.points.append(val4)
        start = end
        end += 4
        (val1.indicator_state,) = _get_struct_I().unpack(str[start:end])
        self.clusters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_fI = None
def _get_struct_fI():
    global _struct_fI
    if _struct_fI is None:
        _struct_fI = struct.Struct("<fI")
    return _struct_fI
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
