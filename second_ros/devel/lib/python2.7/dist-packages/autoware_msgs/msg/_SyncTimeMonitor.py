# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/SyncTimeMonitor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SyncTimeMonitor(genpy.Message):
  _md5sum = "8c6a4dd195d4ccc31d38fad617327689"
  _type = "autoware_msgs/SyncTimeMonitor"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 image_raw
float64 points_raw
float64 points_image
float64 vscan_points
float64 vscan_image
float64 image_obj
float64 image_obj_ranged
float64 image_obj_tracked
float64 current_pose
float64 obj_label
float64 cluster_centroids
float64 obj_pose
float64 execution_time
float64 cycle_time
float64 time_diff


# time image_raw
# time points_raw
# time image_obj
# time image_obj_ranged
# time image_obj_tracked
# time current_pose
# time obj_label
# time cluster_centroids
# time obj_pose
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','image_raw','points_raw','points_image','vscan_points','vscan_image','image_obj','image_obj_ranged','image_obj_tracked','current_pose','obj_label','cluster_centroids','obj_pose','execution_time','cycle_time','time_diff']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_raw,points_raw,points_image,vscan_points,vscan_image,image_obj,image_obj_ranged,image_obj_tracked,current_pose,obj_label,cluster_centroids,obj_pose,execution_time,cycle_time,time_diff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SyncTimeMonitor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_raw is None:
        self.image_raw = 0.
      if self.points_raw is None:
        self.points_raw = 0.
      if self.points_image is None:
        self.points_image = 0.
      if self.vscan_points is None:
        self.vscan_points = 0.
      if self.vscan_image is None:
        self.vscan_image = 0.
      if self.image_obj is None:
        self.image_obj = 0.
      if self.image_obj_ranged is None:
        self.image_obj_ranged = 0.
      if self.image_obj_tracked is None:
        self.image_obj_tracked = 0.
      if self.current_pose is None:
        self.current_pose = 0.
      if self.obj_label is None:
        self.obj_label = 0.
      if self.cluster_centroids is None:
        self.cluster_centroids = 0.
      if self.obj_pose is None:
        self.obj_pose = 0.
      if self.execution_time is None:
        self.execution_time = 0.
      if self.cycle_time is None:
        self.cycle_time = 0.
      if self.time_diff is None:
        self.time_diff = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.image_raw = 0.
      self.points_raw = 0.
      self.points_image = 0.
      self.vscan_points = 0.
      self.vscan_image = 0.
      self.image_obj = 0.
      self.image_obj_ranged = 0.
      self.image_obj_tracked = 0.
      self.current_pose = 0.
      self.obj_label = 0.
      self.cluster_centroids = 0.
      self.obj_pose = 0.
      self.execution_time = 0.
      self.cycle_time = 0.
      self.time_diff = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15d().pack(_x.image_raw, _x.points_raw, _x.points_image, _x.vscan_points, _x.vscan_image, _x.image_obj, _x.image_obj_ranged, _x.image_obj_tracked, _x.current_pose, _x.obj_label, _x.cluster_centroids, _x.obj_pose, _x.execution_time, _x.cycle_time, _x.time_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.image_raw, _x.points_raw, _x.points_image, _x.vscan_points, _x.vscan_image, _x.image_obj, _x.image_obj_ranged, _x.image_obj_tracked, _x.current_pose, _x.obj_label, _x.cluster_centroids, _x.obj_pose, _x.execution_time, _x.cycle_time, _x.time_diff,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15d().pack(_x.image_raw, _x.points_raw, _x.points_image, _x.vscan_points, _x.vscan_image, _x.image_obj, _x.image_obj_ranged, _x.image_obj_tracked, _x.current_pose, _x.obj_label, _x.cluster_centroids, _x.obj_pose, _x.execution_time, _x.cycle_time, _x.time_diff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.image_raw, _x.points_raw, _x.points_image, _x.vscan_points, _x.vscan_image, _x.image_obj, _x.image_obj_ranged, _x.image_obj_tracked, _x.current_pose, _x.obj_label, _x.cluster_centroids, _x.obj_pose, _x.execution_time, _x.cycle_time, _x.time_diff,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
