# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_config_msgs/ConfigWaypointLoader.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConfigWaypointLoader(genpy.Message):
  _md5sum = "315ec0de44494366fb427b1b304522e4"
  _type = "autoware_config_msgs/ConfigWaypointLoader"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string multi_lane_csv
bool replanning_mode
float32 velocity_max
float32 velocity_min
float32 accel_limit
float32 decel_limit
float32 radius_thresh
float32 radius_min
bool resample_mode
float32 resample_interval
int32 velocity_offset
int32 end_point_offset
"""
  __slots__ = ['multi_lane_csv','replanning_mode','velocity_max','velocity_min','accel_limit','decel_limit','radius_thresh','radius_min','resample_mode','resample_interval','velocity_offset','end_point_offset']
  _slot_types = ['string','bool','float32','float32','float32','float32','float32','float32','bool','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       multi_lane_csv,replanning_mode,velocity_max,velocity_min,accel_limit,decel_limit,radius_thresh,radius_min,resample_mode,resample_interval,velocity_offset,end_point_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigWaypointLoader, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.multi_lane_csv is None:
        self.multi_lane_csv = ''
      if self.replanning_mode is None:
        self.replanning_mode = False
      if self.velocity_max is None:
        self.velocity_max = 0.
      if self.velocity_min is None:
        self.velocity_min = 0.
      if self.accel_limit is None:
        self.accel_limit = 0.
      if self.decel_limit is None:
        self.decel_limit = 0.
      if self.radius_thresh is None:
        self.radius_thresh = 0.
      if self.radius_min is None:
        self.radius_min = 0.
      if self.resample_mode is None:
        self.resample_mode = False
      if self.resample_interval is None:
        self.resample_interval = 0.
      if self.velocity_offset is None:
        self.velocity_offset = 0
      if self.end_point_offset is None:
        self.end_point_offset = 0
    else:
      self.multi_lane_csv = ''
      self.replanning_mode = False
      self.velocity_max = 0.
      self.velocity_min = 0.
      self.accel_limit = 0.
      self.decel_limit = 0.
      self.radius_thresh = 0.
      self.radius_min = 0.
      self.resample_mode = False
      self.resample_interval = 0.
      self.velocity_offset = 0
      self.end_point_offset = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.multi_lane_csv
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B6fBf2i().pack(_x.replanning_mode, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.radius_thresh, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.velocity_offset, _x.end_point_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.multi_lane_csv = str[start:end].decode('utf-8')
      else:
        self.multi_lane_csv = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.replanning_mode, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.radius_thresh, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.velocity_offset, _x.end_point_offset,) = _get_struct_B6fBf2i().unpack(str[start:end])
      self.replanning_mode = bool(self.replanning_mode)
      self.resample_mode = bool(self.resample_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.multi_lane_csv
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B6fBf2i().pack(_x.replanning_mode, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.radius_thresh, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.velocity_offset, _x.end_point_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.multi_lane_csv = str[start:end].decode('utf-8')
      else:
        self.multi_lane_csv = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.replanning_mode, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.radius_thresh, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.velocity_offset, _x.end_point_offset,) = _get_struct_B6fBf2i().unpack(str[start:end])
      self.replanning_mode = bool(self.replanning_mode)
      self.resample_mode = bool(self.resample_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6fBf2i = None
def _get_struct_B6fBf2i():
    global _struct_B6fBf2i
    if _struct_B6fBf2i is None:
        _struct_B6fBf2i = struct.Struct("<B6fBf2i")
    return _struct_B6fBf2i
