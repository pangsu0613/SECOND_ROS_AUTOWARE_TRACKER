# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_config_msgs/ConfigRcnn.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ConfigRcnn(genpy.Message):
  _md5sum = "f51f68bdedfbe5da5d10ace3c7a60ff0"
  _type = "autoware_config_msgs/ConfigRcnn"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header  header
float32 score_threshold #minimum score required to keep the detection [0.0, 1.0] (default 0.6)
float32 group_threshold #minimum overlap percentage area required to supress detections(NMS threshold) [0.0, 1.0] (default 0.3)
float32 slices_overlap  #overlap percentage between image slices [0.0, 1.0] (default 0.7)
float32 b_mean
float32 g_mean
float32 r_mean
uint8   image_slices    #number of times to slice the image and search (1, 100], larger value might improve detection but reduce performance (default 16)
uint8   use_gpu
uint8   gpu_device_id
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','score_threshold','group_threshold','slices_overlap','b_mean','g_mean','r_mean','image_slices','use_gpu','gpu_device_id']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,score_threshold,group_threshold,slices_overlap,b_mean,g_mean,r_mean,image_slices,use_gpu,gpu_device_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigRcnn, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.score_threshold is None:
        self.score_threshold = 0.
      if self.group_threshold is None:
        self.group_threshold = 0.
      if self.slices_overlap is None:
        self.slices_overlap = 0.
      if self.b_mean is None:
        self.b_mean = 0.
      if self.g_mean is None:
        self.g_mean = 0.
      if self.r_mean is None:
        self.r_mean = 0.
      if self.image_slices is None:
        self.image_slices = 0
      if self.use_gpu is None:
        self.use_gpu = 0
      if self.gpu_device_id is None:
        self.gpu_device_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.score_threshold = 0.
      self.group_threshold = 0.
      self.slices_overlap = 0.
      self.b_mean = 0.
      self.g_mean = 0.
      self.r_mean = 0.
      self.image_slices = 0
      self.use_gpu = 0
      self.gpu_device_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6f3B().pack(_x.score_threshold, _x.group_threshold, _x.slices_overlap, _x.b_mean, _x.g_mean, _x.r_mean, _x.image_slices, _x.use_gpu, _x.gpu_device_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.score_threshold, _x.group_threshold, _x.slices_overlap, _x.b_mean, _x.g_mean, _x.r_mean, _x.image_slices, _x.use_gpu, _x.gpu_device_id,) = _get_struct_6f3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6f3B().pack(_x.score_threshold, _x.group_threshold, _x.slices_overlap, _x.b_mean, _x.g_mean, _x.r_mean, _x.image_slices, _x.use_gpu, _x.gpu_device_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.score_threshold, _x.group_threshold, _x.slices_overlap, _x.b_mean, _x.g_mean, _x.r_mean, _x.image_slices, _x.use_gpu, _x.gpu_device_id,) = _get_struct_6f3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f3B = None
def _get_struct_6f3B():
    global _struct_6f3B
    if _struct_6f3B is None:
        _struct_6f3B = struct.Struct("<6f3B")
    return _struct_6f3B
