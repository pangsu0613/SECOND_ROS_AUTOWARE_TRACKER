// Generated by gencpp from file autoware_config_msgs/ConfigWaypointLoader.msg
// DO NOT EDIT!


#ifndef AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGWAYPOINTLOADER_H
#define AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGWAYPOINTLOADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_config_msgs
{
template <class ContainerAllocator>
struct ConfigWaypointLoader_
{
  typedef ConfigWaypointLoader_<ContainerAllocator> Type;

  ConfigWaypointLoader_()
    : multi_lane_csv()
    , replanning_mode(false)
    , velocity_max(0.0)
    , velocity_min(0.0)
    , accel_limit(0.0)
    , decel_limit(0.0)
    , radius_thresh(0.0)
    , radius_min(0.0)
    , resample_mode(false)
    , resample_interval(0.0)
    , velocity_offset(0)
    , end_point_offset(0)  {
    }
  ConfigWaypointLoader_(const ContainerAllocator& _alloc)
    : multi_lane_csv(_alloc)
    , replanning_mode(false)
    , velocity_max(0.0)
    , velocity_min(0.0)
    , accel_limit(0.0)
    , decel_limit(0.0)
    , radius_thresh(0.0)
    , radius_min(0.0)
    , resample_mode(false)
    , resample_interval(0.0)
    , velocity_offset(0)
    , end_point_offset(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _multi_lane_csv_type;
  _multi_lane_csv_type multi_lane_csv;

   typedef uint8_t _replanning_mode_type;
  _replanning_mode_type replanning_mode;

   typedef float _velocity_max_type;
  _velocity_max_type velocity_max;

   typedef float _velocity_min_type;
  _velocity_min_type velocity_min;

   typedef float _accel_limit_type;
  _accel_limit_type accel_limit;

   typedef float _decel_limit_type;
  _decel_limit_type decel_limit;

   typedef float _radius_thresh_type;
  _radius_thresh_type radius_thresh;

   typedef float _radius_min_type;
  _radius_min_type radius_min;

   typedef uint8_t _resample_mode_type;
  _resample_mode_type resample_mode;

   typedef float _resample_interval_type;
  _resample_interval_type resample_interval;

   typedef int32_t _velocity_offset_type;
  _velocity_offset_type velocity_offset;

   typedef int32_t _end_point_offset_type;
  _end_point_offset_type end_point_offset;





  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigWaypointLoader_

typedef ::autoware_config_msgs::ConfigWaypointLoader_<std::allocator<void> > ConfigWaypointLoader;

typedef boost::shared_ptr< ::autoware_config_msgs::ConfigWaypointLoader > ConfigWaypointLoaderPtr;
typedef boost::shared_ptr< ::autoware_config_msgs::ConfigWaypointLoader const> ConfigWaypointLoaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_config_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'autoware_config_msgs': ['/home/xi/catkin_ws_second_detecter_tracker/second_ros/src/msgs/autoware_config_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "315ec0de44494366fb427b1b304522e4";
  }

  static const char* value(const ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x315ec0de44494366ULL;
  static const uint64_t static_value2 = 0xfb427b1b304522e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_config_msgs/ConfigWaypointLoader";
  }

  static const char* value(const ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string multi_lane_csv\n\
bool replanning_mode\n\
float32 velocity_max\n\
float32 velocity_min\n\
float32 accel_limit\n\
float32 decel_limit\n\
float32 radius_thresh\n\
float32 radius_min\n\
bool resample_mode\n\
float32 resample_interval\n\
int32 velocity_offset\n\
int32 end_point_offset\n\
";
  }

  static const char* value(const ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.multi_lane_csv);
      stream.next(m.replanning_mode);
      stream.next(m.velocity_max);
      stream.next(m.velocity_min);
      stream.next(m.accel_limit);
      stream.next(m.decel_limit);
      stream.next(m.radius_thresh);
      stream.next(m.radius_min);
      stream.next(m.resample_mode);
      stream.next(m.resample_interval);
      stream.next(m.velocity_offset);
      stream.next(m.end_point_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigWaypointLoader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_config_msgs::ConfigWaypointLoader_<ContainerAllocator>& v)
  {
    s << indent << "multi_lane_csv: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.multi_lane_csv);
    s << indent << "replanning_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.replanning_mode);
    s << indent << "velocity_max: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_max);
    s << indent << "velocity_min: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_min);
    s << indent << "accel_limit: ";
    Printer<float>::stream(s, indent + "  ", v.accel_limit);
    s << indent << "decel_limit: ";
    Printer<float>::stream(s, indent + "  ", v.decel_limit);
    s << indent << "radius_thresh: ";
    Printer<float>::stream(s, indent + "  ", v.radius_thresh);
    s << indent << "radius_min: ";
    Printer<float>::stream(s, indent + "  ", v.radius_min);
    s << indent << "resample_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resample_mode);
    s << indent << "resample_interval: ";
    Printer<float>::stream(s, indent + "  ", v.resample_interval);
    s << indent << "velocity_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity_offset);
    s << indent << "end_point_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_point_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_CONFIG_MSGS_MESSAGE_CONFIGWAYPOINTLOADER_H
