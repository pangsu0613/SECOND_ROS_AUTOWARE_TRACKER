// Generated by gencpp from file autoware_msgs/WaypointState.msg
// DO NOT EDIT!


#ifndef AUTOWARE_MSGS_MESSAGE_WAYPOINTSTATE_H
#define AUTOWARE_MSGS_MESSAGE_WAYPOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_msgs
{
template <class ContainerAllocator>
struct WaypointState_
{
  typedef WaypointState_<ContainerAllocator> Type;

  WaypointState_()
    : aid(0)
    , lanechange_state(0)
    , steering_state(0)
    , accel_state(0)
    , stopline_state(0)
    , event_state(0)  {
    }
  WaypointState_(const ContainerAllocator& _alloc)
    : aid(0)
    , lanechange_state(0)
    , steering_state(0)
    , accel_state(0)
    , stopline_state(0)
    , event_state(0)  {
  (void)_alloc;
    }



   typedef int32_t _aid_type;
  _aid_type aid;

   typedef uint8_t _lanechange_state_type;
  _lanechange_state_type lanechange_state;

   typedef uint8_t _steering_state_type;
  _steering_state_type steering_state;

   typedef uint8_t _accel_state_type;
  _accel_state_type accel_state;

   typedef uint8_t _stopline_state_type;
  _stopline_state_type stopline_state;

   typedef uint64_t _event_state_type;
  _event_state_type event_state;



  enum {
    NULLSTATE = 0u,
    STR_LEFT = 1u,
    STR_RIGHT = 2u,
    STR_STRAIGHT = 3u,
    TYPE_NULL = 0u,
    TYPE_STOPLINE = 1u,
    TYPE_STOP = 2u,
  };


  typedef boost::shared_ptr< ::autoware_msgs::WaypointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_msgs::WaypointState_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointState_

typedef ::autoware_msgs::WaypointState_<std::allocator<void> > WaypointState;

typedef boost::shared_ptr< ::autoware_msgs::WaypointState > WaypointStatePtr;
typedef boost::shared_ptr< ::autoware_msgs::WaypointState const> WaypointStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_msgs::WaypointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_msgs::WaypointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autoware_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/kinetic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/kinetic/share/jsk_recognition_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'autoware_msgs': ['/home/xi/catkin_ws_second_detecter_tracker/second_ros/src/msgs/autoware_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::WaypointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_msgs::WaypointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::WaypointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_msgs::WaypointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::WaypointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_msgs::WaypointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_msgs::WaypointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed065ddb9b4e4cb06e0997e4852ca55b";
  }

  static const char* value(const ::autoware_msgs::WaypointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed065ddb9b4e4cb0ULL;
  static const uint64_t static_value2 = 0x6e0997e4852ca55bULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_msgs::WaypointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_msgs/WaypointState";
  }

  static const char* value(const ::autoware_msgs::WaypointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_msgs::WaypointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 aid\n\
uint8 NULLSTATE=0\n\
uint8 lanechange_state\n\
\n\
uint8 steering_state\n\
uint8 STR_LEFT=1\n\
uint8 STR_RIGHT=2\n\
uint8 STR_STRAIGHT=3\n\
\n\
uint8 accel_state\n\
uint8 stopline_state\n\
  uint8 TYPE_NULL=0\n\
  uint8 TYPE_STOPLINE=1\n\
  uint8 TYPE_STOP=2\n\
# 1 is stopline, 2 is stop which 2 can only be released manually.\n\
uint64 event_state\n\
";
  }

  static const char* value(const ::autoware_msgs::WaypointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_msgs::WaypointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aid);
      stream.next(m.lanechange_state);
      stream.next(m.steering_state);
      stream.next(m.accel_state);
      stream.next(m.stopline_state);
      stream.next(m.event_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_msgs::WaypointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_msgs::WaypointState_<ContainerAllocator>& v)
  {
    s << indent << "aid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.aid);
    s << indent << "lanechange_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanechange_state);
    s << indent << "steering_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_state);
    s << indent << "accel_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accel_state);
    s << indent << "stopline_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopline_state);
    s << indent << "event_state: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.event_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_MSGS_MESSAGE_WAYPOINTSTATE_H
